#!/usr/bin/env bash
set -euo pipefail

if [[ $EUID -eq 0 ]]; then
   echo "ERROR: This script must not be run as root, or using sudo."
   exit 1
fi

ARGS=("$@")
BREWBLOX_DIR=""

log_info() {
    echo "$(tput setaf 6)INFO       $1 $(tput sgr0)"
}

log_warn() {
    echo "$(tput setaf 3)WARN       $1 $(tput sgr0)"
}

log_error() {
    echo "$(tput setaf 1)ERROR      $1 $(tput sgr0)"
}

flush_stdin() {
    while read -ret 0.1; do : ; done
}

# Args:
# - target directory
is_brewblox_dir() {
    [[ -f "$1/.env" ]] && grep -q "BREWBLOX_RELEASE" "$1/.env"
    return
}

# Args: none
# Assumes PWD is the brewblox directory
install_ctl() {
    # Determine BREWBLOX_RELEASE
    # Priority is given to:
    # - Environment variable
    # - Value for previous install
    # - Default
    if [ -z "${BREWBLOX_RELEASE:-}" ]
    then
        if is_brewblox_dir "${PWD}"
        then
            BREWBLOX_RELEASE=$(grep BREWBLOX_RELEASE .env | cut -d '=' -f2)
        else
            BREWBLOX_RELEASE="edge"
        fi
    fi

    # Create virtual env
    python3 -m venv .venv

    # Download the sdist tarball
    log_info "Downloading brewblox-ctl for ${BREWBLOX_RELEASE}..."
    wget -q \
        -O "./brewblox-ctl.tar.gz" \
        "https://brewblox.blob.core.windows.net/ctl/${BREWBLOX_RELEASE}/brewblox-ctl.tar.gz"

    # Activate virtual env
    # shellcheck source=/dev/null
    source .venv/bin/activate

    # Install packages into the virtual env
    log_info "Installing Python packages..."
    python3 -m pip install pip setuptools wheel
    python3 -m pip install --prefer-binary cryptography
    python3 -m pip install ./brewblox-ctl.tar.gz
}

# Args: none
install_brewblox() {
    if [ -z "${BREWBLOX_DIR:-}" ]
    then
        if is_brewblox_dir "${PWD}"
        then
            BREWBLOX_DIR="${PWD}"
        else
            BREWBLOX_DIR="${PWD}/brewblox"
        fi
    fi

    # Check if dir exists, but is not a brewblox dir, and is not empty
    if [[ -d "${BREWBLOX_DIR}" ]] \
        && ! is_brewblox_dir "$BREWBLOX_DIR" \
        && [ -n "$(ls -A "${BREWBLOX_DIR:?}")" ]
    then
        log_warn "${BREWBLOX_DIR} already exists, and is not a Brewblox directory."
        flush_stdin
        read -rp "Remove directory and continue? (y/N)" response
        if [[ "${response}" =~ ^y(es)? ]]
        then
            rm -rf "${BREWBLOX_DIR:?}/*"
        else
            exit 1
        fi
    fi

    # Ensure that the Brewblox dir is cwd
    if [[ ${BREWBLOX_DIR} != "${PWD}" ]]
    then
        mkdir -p "${BREWBLOX_DIR}"
        pushd "${BREWBLOX_DIR}" > /dev/null
    fi

    install_ctl
}

# Args: none
run_ctl() {
    if [[ ${BREWBLOX_DIR} != "${PWD}" ]]
    then
        pushd "${BREWBLOX_DIR}" > /dev/null
    fi

    if [[ ! -d .venv ]]
    then
        install_ctl
    fi

    # shellcheck source=/dev/null
    source .venv/bin/activate
    exec python3 -m brewblox_ctl "${ARGS[@]}"
}

# Default use case:
# brewblox-ctl is called while PWD is a Brewblox dir
# -> Run brewblox-ctl in Python
if is_brewblox_dir "${PWD}"
then
    BREWBLOX_DIR="${PWD}"
    run_ctl
    exit $?
fi

# Special use case:
# (re-)installing brewblox
# -> Always first download brewblox-ctl, then run install command
for arg in "${ARGS[@]}"
do
    if [[ "${arg}" == "install" ]]
    then
        install_brewblox
        run_ctl
        exit $?
    fi
done

# Common error scenario:
# brewblox-ctl is called from a non-Brewblox dir,
# but a Brewblox dir is found in a common or adjacent place.
# -> Prompt the user how and where to retry the command.
for dir in "${HOME}/brewblox" "./brewblox" "../brewblox"
do
    if is_brewblox_dir "${dir}"
    then
        log_error "Current directory is not a Brewblox install directory."
        log_error "A Brewblox installation was found in ${dir}."
        log_error "Navigate there, and re-run the command."
        echo ""
        echo "       cd ${dir}"
        echo "       $0 ${ARGS[*]}"
        echo ""
        exit 1
    fi
done

# We haven't found any Brewblox directory, and we're not about to install it
# -> Give up.
log_error "Current directory is not a Brewblox install directory."
log_error "No other Brewblox install directory was detected."
exit 1
