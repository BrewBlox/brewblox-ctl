"""
Brewblox-ctl installation commands
"""

from time import sleep

import click
from brewblox_ctl import click_helpers, const, fixes, utils
from brewblox_ctl.commands import snapshot
from brewblox_ctl.utils import sh


@click.group(cls=click_helpers.OrderedGroup)
def cli():
    """Command collector"""


@cli.command()
@click.pass_context
@click.option('--pull/--no-pull',
              default=True,
              help='Pull docker service images.')
@click.option('--snapshot', 'snapshot_file',
              help='Load system snapshot generated by `brewblox-ctl snapshot save`.')
def install(ctx: click.Context,
            pull,
            snapshot_file):
    """Install Brewblox and its dependencies.

    Brewblox can be installed multiple times on the same computer.
    Settings and databases are stored in a Brewblox directory.

    This command also installs system-wide dependencies.
    A reboot is required after installing docker, or adding the user to the 'docker' group.

    By default, `brewblox-ctl install` attempts to download packages using the apt package manager.
    If you are using a system without apt (eg. Synology NAS), this step will be skipped.
    You will need to manually install any missing libraries.

    When using the `--snapshot ARCHIVE` option, no dir is created.
    Instead, the directory in the snapshot is extracted.
    It will be renamed to the desired name of the Brewblox directory.

    \b
    Steps:
        - Ask confirmation for installation steps.
        - Install apt packages.
        - Install docker.
        - Add user to 'docker' group.
        - Fix host IPv6 settings.
        - Disable host-wide mDNS reflection.
        - Set variables in .env file.
        - If snapshot provided:
            - Load configuration from snapshot.
        - Else:
            - Check for port conflicts.
            - Create docker-compose configuration files.
            - Pull docker images.
            - Create datastore (Redis) directory.
            - Create history (Victoria) directory.
            - Create gateway (Traefik) directory.
            - Create SSL certificates.
            - Create eventbus (Mosquitto) directory.
            - Set version number in .env file.
        - Reboot if needed.
    """
    utils.confirm_mode()
    use_defaults = utils.confirm('Do you want to install with default settings?')

    apt_deps = 'curl net-tools libssl-dev libffi-dev avahi-daemon tio'
    user = utils.getenv('USER')

    # Default settings
    skip_confirm = True
    apt_install = True
    docker_install = True
    docker_group_add = True
    reboot_needed = False
    prompt_reboot = True

    if not use_defaults:
        skip_confirm = utils.confirm('Do you want to disable the confirmation prompt for brewblox-ctl commands?')

    # Check if packages should be installed
    if not utils.command_exists('apt'):
        utils.info('Apt is not available. You may need to find another way to install dependencies.')
        utils.info(f'Apt packages: "{apt_deps}"')
        apt_install = False
    elif not use_defaults:
        apt_install = utils.confirm(f'Do you want to install apt packages "{apt_deps}"?')

    # Check if docker should be installed
    if utils.command_exists('docker'):
        utils.info('Docker is already installed.')
        docker_install = False
    elif not use_defaults:
        docker_install = utils.confirm('Do you want to install docker?')

    # Check if user should be added to docker group
    if utils.is_docker_user():
        utils.info(f'{user} already belongs to the docker group.')
        docker_group_add = False
    elif not use_defaults:
        docker_group_add = utils.confirm('Do you want to run docker commands without sudo?')

    # Confirm configuration settings
    # Init will be skipped altogether if we're loading from snapshot
    if not snapshot_file:
        skip_compose = \
            utils.path_exists('./docker-compose.yml') \
            and utils.confirm('This directory already contains a docker-compose.yml file. ' +
                              'Do you want to keep it?')

        skip_datastore = \
            utils.path_exists('./redis/') \
            and utils.confirm('This directory already contains Redis datastore files. ' +
                              'Do you want to keep them?')

        skip_history = \
            utils.path_exists('./victoria/') \
            and utils.confirm('This directory already contains Victoria history files. ' +
                              'Do you want to keep them?')

        skip_gateway = \
            utils.path_exists('./traefik/') \
            and utils.confirm('This directory already contains Traefik gateway files. ' +
                              'Do you want to keep them?')

        skip_eventbus = \
            utils.path_exists('./mosquitto/') \
            and utils.confirm('This directory already contains Mosquitto config files. ' +
                              'Do you want to keep them?')

    # If a reboot is required, ask whether the user wants to be prompted.
    # A reboot is required after the user was added to the docker group.
    # We need to check for the scenario where the user was previously added to the docker group,
    # but no reboot happened yet.
    if docker_install \
        or docker_group_add \
            or utils.is_docker_user() and not utils.has_docker_rights():
        reboot_needed = True
        prompt_reboot = utils.confirm('A reboot is required after installation. ' +
                                      'Do you want to be prompted before that happens?')

    # Install Apt packages
    if apt_install:
        utils.info('Installing apt packages...')
        sh([
            'sudo apt update',
            'sudo apt upgrade -y',
            f'sudo apt install -y {apt_deps}',
        ])
    else:
        utils.info('Skipped: apt install.')

    # Install docker
    if docker_install:
        utils.info('Installing docker...')
        sh('curl -sL get.docker.com | sh', check=False)
    else:
        utils.info('Skipped: docker install.')

    # Add user to 'docker' group
    if docker_group_add:
        utils.info(f"Adding {user} to 'docker' group...")
        sh('sudo usermod -aG docker $USER')
    else:
        utils.info(f"Skipped: adding {user} to 'docker' group.")

    # Always apply fixes
    fixes.fix_ipv6(None, False)
    fixes.unset_avahi_reflection()

    # Set variables in .env file
    # Set version number to 0.0.0 until snapshot load / init is done
    utils.info('Setting .env values...')
    utils.setenv(const.CFG_VERSION_KEY, '0.0.0')
    utils.setenv(const.SKIP_CONFIRM_KEY, str(skip_confirm))
    for key, default_val in const.ENV_DEFAULTS.items():
        utils.setenv(key, utils.getenv(key, default_val))

    # Install process splits here
    # Either load all config files from snapshot or run init
    if snapshot_file:
        ctx.invoke(snapshot.load,
                   dir='./',
                   file=snapshot_file,
                   force=True)
    else:
        sudo = utils.optsudo()
        release = utils.getenv('BREWBLOX_RELEASE')

        utils.info('Checking for port conflicts...')
        utils.check_ports()

        utils.info('Copying docker-compose.shared.yml...')
        sh(f'cp -f {const.CONFIG_DIR}/docker-compose.shared.yml ./')

        if not skip_compose:
            utils.info('Copying docker-compose.yml...')
            sh(f'cp -f {const.CONFIG_DIR}/docker-compose.yml ./')

        # Stop and pull after we're sure we have a compose file
        utils.info('Stopping services...')
        sh(f'{sudo}docker-compose down')

        if pull:
            utils.info('Pulling docker images...')
            sh(f'{sudo}docker-compose pull')

        if not skip_datastore:
            utils.info('Creating datastore directory...')
            sh('sudo rm -rf ./redis/; mkdir ./redis/')

        if not skip_history:
            utils.info('Creating history directory...')
            sh('sudo rm -rf ./victoria/; mkdir ./victoria/')

        if not skip_gateway:
            utils.info('Creating gateway directory...')
            sh('sudo rm -rf ./traefik/; mkdir ./traefik/')

            utils.info('Creating SSL certificate...')
            utils.makecert('./traefik', release)

        if not skip_eventbus:
            utils.info('Creating mosquitto config directory...')
            sh('sudo rm -rf ./mosquitto/; mkdir ./mosquitto/')

        # Always copy cert config to traefik dir
        sh(f'cp -f {const.CONFIG_DIR}/traefik-cert.yaml ./traefik/')

        # Init done - now set CFG version
        utils.setenv(const.CFG_VERSION_KEY, const.CURRENT_VERSION)

    utils.info('All done!')

    # Reboot
    if reboot_needed:
        if prompt_reboot:
            utils.info('Press ENTER to reboot.')
            input()
        else:
            utils.info('Rebooting in 10 seconds...')
            sleep(10)
        sh('sudo reboot')


@cli.command()
@click.option('--dir',
              default='./traefik',
              help='Target directory for generated certs.')
@click.option('--release',
              default=None,
              help='Brewblox release track.')
def makecert(dir, release):
    """Generate a self-signed SSL certificate.

    \b
    Steps:
        - Create directory if it does not exist.
        - Create brewblox.crt and brewblox.key files.
    """
    utils.confirm_mode()
    utils.makecert(dir, release)


@cli.command()
@click.option('--config-file', help='Path to Docker daemon config. Defaults to /etc/docker/daemon.json.')
def fix_ipv6(config_file):
    """Fix IPv6 support on the host machine.

    Reason: https://github.com/docker/for-linux/issues/914
    Unlike globally disabling IPv6 support on the host,
    this has no impact outside the Docker environment.

    Some hosts (Synology) may be using a custom location for the daemon config file.
    If the --config-file argument is not set, the --config-file argument for the active docker daemon is used.
    If it is not set, the default /etc/docker/daemon.json is used.
    """
    fixes.fix_ipv6(config_file)
